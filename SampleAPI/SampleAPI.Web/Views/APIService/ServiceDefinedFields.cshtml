@model APIService

@{
    IEnumerable<ServiceDefinedField> serviceDefinedFields = !string.IsNullOrWhiteSpace(Model.ServiceDefinedFields) ?
            JsonConvert.DeserializeObject<IEnumerable<ServiceDefinedField>>(Model.ServiceDefinedFields) :
            Enumerable.Empty<ServiceDefinedField>();
    IEnumerable<SelectListItem> types = APIServiceRepository.GetAPIServiceDataTypes()
                                                            .Select(item => new SelectListItem()
                                                            {
                                                                Text = item.ToString(),
                                                                Value = item.ToString()
                                                            })
                                                            .OrderBy(item => item.Text);
}

<div class="row">
    <div class="col-4 border-right">
        <h6>Manage Defined Fields</h6>
    </div>
    <div class="col-8">
        <div class="input-group input-group-sm">
            <input class="form-control" type="text" placeholder="Enter unique name for new field..." required="required"
                   pattern="[A-z0-9_-]{3,}" data-toggle="popover" data-placement="top" data-content="A-z,0-9,-,_ allowed; min 3 characters; unique" data-trigger="manual" />
            @Html.DropDownList("ServiceDataTypes", types, "Select data type...", new { @class = "form-control w-auto",
                                                                              style = "flex: 0 0 auto",
                                                                              required = "required",
                                                                              data_toggle = "popover",
                                                                              data_placement = "top",
                                                                              data_trigger = "manual",
                                                                              data_content = "Data type is required" })
            <div class="input-group-append">
                <button type="button" class="btn btn-outline-primary" onclick="addServiceDefinedField(this, @(Model.Id))"><i class="fa fa-plus"></i></button>
            </div>
        </div>
        <hr />
        <div class="d-flex flex-row flex-wrap" data-container="@(nameof(ServiceDefinedField))">
            <div class="input-group input-group-sm d-none w-auto m-1" data-template="@(nameof(ServiceDefinedField))">
                <div class="input-group-prepend">
                    <span class="input-group-text"></span>
                </div>
                @Html.Hidden(nameof(ServiceDefinedField.Name), string.Empty)
                @Html.Hidden(nameof(ServiceDefinedField.Type), string.Empty)
                <div class="input-group-append">
                    <button type="button" class="btn btn-outline-danger" onclick="removeServiceDefinedField(this, @(Model.Id))"><i class="fa fa-trash"></i></button>
                </div>
            </div>
            @foreach (var field in serviceDefinedFields.OrderBy(item => item.Name))
            {
                <div class="input-group input-group-sm w-auto m-1" data-display-name="@(field.Name) [@(field.Type)]">
                    <div class="input-group-prepend">
                        <span class="input-group-text">@(field.Name) [@(field.Type)]</span>
                    </div>
                    @Html.Hidden(nameof(ServiceDefinedField.Name), field.Name)
                    @Html.Hidden(nameof(ServiceDefinedField.Type), JsonConvert.SerializeObject(field.Type))
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-danger" onclick="removeServiceDefinedField(this, @(Model.Id))"><i class="fa fa-trash"></i></button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>