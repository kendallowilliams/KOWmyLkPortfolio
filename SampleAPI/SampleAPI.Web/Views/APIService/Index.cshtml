@model APIServiceViewModel

@{
    var serviceGroups = Model.APIServices.GroupBy(service => service.Name.Substring(0, 1), StringComparer.OrdinalIgnoreCase);
    int firstServiceId = serviceGroups.Any() ? serviceGroups.FirstOrDefault().FirstOrDefault().Id : -1,
        selectedId = Model.SelectedServiceId.HasValue ? Model.SelectedServiceId.Value : firstServiceId;

    ViewBag.Title = "API Services";
}

<div class="row" style="flex: 1 1 auto">
    <div class="col-3 border-right">
        <div class="d-flex flex-row">
            <h5 style="flex: 1 1 auto">API Services</h5>
            <button type="button" class="btn btn-outline-primary btn-sm" data-target="#addAPIServiceModal" data-toggle="modal" data-demo-disabled>
                <i class="fa fa-plus"></i>
            </button>
        </div>
        <hr />
        <div id="accordion">
            @foreach (var group in serviceGroups)
            {
                <div class="card">
                    <div class="card-header m-0 p-0">
                        <button class="btn btn-link py-0" data-toggle="collapse" data-target="#collapse-@(nameof(APIService))-@(group.Key)">@(group.Key.ToUpper())...</button>
                    </div>
                    <div id="collapse-@(nameof(APIService))-@(group.Key)" class="collapse show" data-parent="#accordion">
                        <div class="card-body m-0 p-0">
                            <div class="list-group list-group-flush py-0">
                                @foreach (APIService service in group.OrderBy(item => item.Name, StringComparer.OrdinalIgnoreCase))
                                {
                                    <button type="button" class="list-group-item list-group-item-action py-0"
                                            onclick="loadService(@(service.Id))" data-service-id="@(service.Id)">
                                        @(service.Name)
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-9 d-flex flex-column" id="serviceContainer">
    </div>
</div>

@section scripts {
    <script type="text/javascript" defer="defer">
        function loadService(id) {
            showLoading();
            $('button[data-service-id]').removeClass('active').filter('[data-service-id="' + id + '"]').addClass('active');
            $('#serviceContainer').html('');
            $("#serviceContainer").load('@Url.Action(nameof(APIServiceController.APIService), "APIService")?id=' + id, () => {
                if (@(BaseController.IsDemo().ToString().ToLower())) {
                    $('[data-demo-disabled]').prop('disabled', 'disabled');
                    $('#details').find('input, textarea, select').prop('readonly', 'readonly');
                }
                hideLoading();
            });
        }

        function deleteAPIService(id) {
            if (window.confirm('Please confirm you want to delete this service...')) {
                showLoading();
                $.post('@(Url.Action(nameof(APIServiceController.DeleteAPIService), "APIService"))', { serviceId: id }, () => {
                    window.location = '@(Url.Action(nameof(APIServiceController.Index), "APIService"))';
                });
            }
        }

        // Service Definied Fields ------------------------------------------------------------------------------------------------

        function addServiceDefinedField(btn, serviceId) {
            const $btn = $(btn),
                $input = $(btn.parentNode.parentNode).find('input'),
                $select = $(btn.parentNode.parentNode).find('select'),
                $option = $($select.prop('options')).filter((index, option) => option.selected),
                $newField = $('[data-template="@(nameof(ServiceDefinedField))"]').clone(),
                displayName = $input.val() + ' [' + $option.text() + ']',
                $container = $('[data-container="@(nameof(ServiceDefinedField))"]'),
                fieldNames = $container.find('[data-display-name]')
                    .map((index, field) => $(field).attr('data-display-name'))
                    .toArray(),
                lcFieldNames = fieldNames.map(item => item.toLowerCase()),
                fieldExists = lcFieldNames.includes(displayName.toLowerCase()),
                lcSortedFieldNames = lcFieldNames.concat(displayName.toLowerCase()).sort(),
                inputValid = $input.map((index, input) => input.checkValidity()).get(0),
                selectValid = $select.map((index, select) => select.checkValidity()).get(0);

            $input.removeClass('is-invalid').popover('dispose');
            $select.removeClass('is-invalid').popover('dispose');
            if (inputValid && selectValid && !fieldExists) {
                $newField.removeAttr('data-template').removeClass('d-none').attr('data-display-name', displayName);
                $newField.find('[name="@(nameof(ServiceDefinedField.Name))"]').val($input.val());
                $newField.find('[name="@(nameof(ServiceDefinedField.Type))"]').val($option.val());
                $newField.find('span').text(displayName);
                $container.append($newField);
                $(lcSortedFieldNames).each((index, name) => {
                    const $item = $container.find('[data-display-name]').filter((index, item) => $(item).attr('data-display-name').toLowerCase() === name);

                    $container.append($item);
                });
                updateServiceDefinedFields(serviceId);
                $input.val('');
                $select.val('');
            } else {
                if (!inputValid || fieldExists) /*then*/ $input.addClass('is-invalid').popover('show');
                if (!selectValid) /*then*/ $select.addClass('is-invalid').popover('show');
            }
        }

        function removeServiceDefinedField(btn, serviceId) {
            const $btn = $(btn),
                $field = $(btn.parentNode.parentNode),
                $container = $('[data-container="@(nameof(ServiceDefinedField))"]');

            if (window.confirm('Please confirm you want to delete this field...')) {
                $field.remove();
                updateServiceDefinedFields(serviceId);
            }
        }

        function updateServiceDefinedFields(serviceId) {
            const $container = $('[data-container="@(nameof(ServiceDefinedField))"]'),
                $fields = $container.find('[data-display-name]'),
                fields = $fields.map((index, field) => ({
                    Name: $(field).find('[name="@(nameof(ServiceDefinedField.Name))"]').val(),
                    Type: $(field).find('[name="@(nameof(ServiceDefinedField.Type))"]').val()
                })).toArray();

            $.post('@Url.Action(nameof(APIServiceController.UpdateAPIServiceDefinedFields), "APIService")', { serviceId: serviceId, fields: fields });
        }

        // END Service Definied Fields --------------------------------------------------------------------------------------------

        $(function () {
            loadService(@(selectedId));
        });
    </script>
}